spring.batch.job.names=CLUSTERING_FROM_MONGO_JOB
parameters.vcf=
parameters.assemblyAccession=GCA_009858895.3
parameters.projectAccession=
parameters.remappedFrom=
parameters.chunkSize=100        

accessioning.submitted.categoryId=ss
accessioning.clustered.categoryId=rs

accessioning.monotonic.ss.blockSize=100000
accessioning.monotonic.ss.blockStartValue=5000000000
accessioning.monotonic.ss.nextBlockInterval=1000000000
accessioning.monotonic.rs.blockSize=100000
accessioning.monotonic.rs.blockStartValue=3000000000
accessioning.monotonic.rs.nextBlockInterval=1000000000

spring.data.mongodb.host={mongo_host}
spring.data.mongodb.port=27017
spring.data.mongodb.database=eva_accession
mongodb.read-preference=primary

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://{postgres_host}:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.tomcat.max-active=3

#See https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.1-Release-Notes#bean-overriding
spring.main.allow-bean-definition-overriding=true
#As this is a spring batch application, disable the embedded tomcat. This is the new way to do that for spring 2.
spring.main.web-application-type=none
spring.main.web-environment=false

spring.jpa.generate-ddl=true
# This entry is put just to avoid a warning message in the logs when you start the spring-boot application.
# This bug is from hibernate which tries to retrieve some metadata from postgresql db and failed to find that and logs as a warning
# It doesnt cause any issue though.
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation = true
